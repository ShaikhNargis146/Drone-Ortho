username for ubuntu: unifliubuntu
unifliwindows01
unifli-file-share



appId &client id: 6b7b968f-2227-474a-886a-7f3925098873
new : 8071bab1-bd2b-44c3-8187-c4e0ff587a6d


key: OVuj+j1DV+qIrTgkLGWg95pfledcIqztlDkSDwRomTU=
new : e67K/jEBfaNlyR69NSDBULSduGIaU5csBXPKXaFkLRg=

directoryId: zuMsshfyk/tnFpYlqb1+eCJMKCQvCPaEqz78aF3UIf8=



"apiVersions": [
                        "2016-08-01"
                    ]

                    dir id & tenant id: e247dc39-abba-4fcf-b626-370066fc99e6
                    new : 21890070-e17a-4ba7-a788-e3533a8e1cb8

                    sub id: ac825e96-87df-4576-93fb-5a3f24840ed2
                    new : 88979fb6-3173-4a84-840e-0d1317650f11
                    client id: 7d35f8bc-4dba-45d6-902d-3fa454d84b6d 


     vmAzure: function (req, res) {
        msRestAzure.loginWithServicePrincipalSecret(clientId, secret, domain, function (err, credentials, subscriptions) {
            if (err) return console.log(err);
            console.log('credentials', credentials, subscriptionId)
            resourceClient = new ResourceManagementClient(credentials, subscriptionId);
            computeClient = new ComputeManagementClient(credentials, subscriptionId);
            storageClient = new StorageManagementClient(credentials, subscriptionId);
            networkClient = new NetworkManagementClient(credentials, subscriptionId);

            async.series([
                    // function (callback) {
                    //     ///////////////////////////////////////////////////////////////////////////////////
                    //     //Task1: Create VM. This is a fairly complex task. Hence we have a wrapper method//
                    //     //named createVM() that encapsulates the steps to create a VM. Other tasks are   //
                    //     //fairly simple in comparison. Hence we don't have a wrapper method for them.    //
                    //     ///////////////////////////////////////////////////////////////////////////////////
                    //     console.log('\n>>>>>>>Start of Task1: Create a VM named: ' + vmName);
                    //     // computeClient.virtualMachines.listAll(function (err, result) {
                    //     //     if (err) {
                    //     //         console.log(util.format('\n???????Error in Task5: while listing all the vms under ' +
                    //     //             'the current subscription:\n%s', util.inspect(err, {
                    //     //                 depth: null
                    //     //             })));
                    //     //         callback(err);
                    //     //     } else {
                    //     //         // console.log(util.format('\n######End of Task5: List all the vms under the current ' +
                    //     //         //     'subscription is successful.\n%s', util.inspect(result, {
                    //     //         //         depth: null
                    //     //         //     })));
                    //     //         callback(null, result);
                    //     //     }
                    //     // });
                    //     // createVM(function (err, result) {
                    //     //     if (err) {
                    //     //         console.log(util.format('\n???????Error in Task1: while creating a VM:\n%s',
                    //     //             util.inspect(err, {
                    //     //                 depth: null
                    //     //             })));
                    //     //         callback(err);
                    //     //     } else {
                    //     //         console.log(util.format('\n######End of Task1: Create a VM is succesful.\n%s',
                    //     //             util.inspect(result, {
                    //     //                 depth: null
                    //     //             })));
                    //     //         callback(null, result);
                    //     //     }
                    //     // });
                    // },
                    function (callback) {
                        /////////////////////////////////////////////////////////
                        //Task2: Get Information about the vm created in Task1.//
                        /////////////////////////////////////////////////////////
                        console.log('\n>>>>>>>Start of Task2: Get VM Info about VM: ' + vmName);
                        computeClient.virtualMachines.get(resourceGroupName, vmName, function (err, result) {
                            if (err) {
                                console.log(util.format('\n???????Error in Task2: while getting the VM Info:\n%s',
                                    util.inspect(err, {
                                        depth: null
                                    })));
                                callback(err);
                            } else {
                                console.log(util.format('\n######End of Task2: Get VM Info is successful.\n%s',
                                    util.inspect(result, {
                                        depth: null
                                    })));
                                callback(null, result);
                            }
                        });
                    },
                    function (callback) {
                        ///////////////////////////
                        //Task3: Poweroff the VM.//
                        ///////////////////////////
                        console.log('\n>>>>>>>Start of Task3: Poweroff the VM: ' + vmName);
                        computeClient.virtualMachines.powerOff(resourceGroupName, vmName, function (err, result) {
                            if (err) {
                                console.log(util.format('\n???????Error in Task3: while powering off the VM:\n%s',
                                    util.inspect(err, {
                                        depth: null
                                    })));
                                callback(err);
                            } else {
                                console.log(util.format('\n######End of Task3: Poweroff the VM is successful.\n%s',
                                    util.inspect(result, {
                                        depth: null
                                    })));
                                callback(null, result);
                            }
                        });
                    },
                    function (callback) {
                        ////////////////////////
                        //Task4: Start the VM.//
                        ////////////////////////
                        console.log('\n>>>>>>>Start of Task4: Start the VM: ' + vmName);
                        computeClient.virtualMachines.start(resourceGroupName, vmName, function (err, result) {
                            if (err) {
                                console.log(util.format('\n???????Error in Task4: while starting the VM:\n%s',
                                    util.inspect(err, {
                                        depth: null
                                    })));
                                callback(err);
                            } else {
                                console.log(util.format('\n######End of Task4: Start the VM is successful.\n%s',
                                    util.inspect(result, {
                                        depth: null
                                    })));
                                callback(null, result);
                            }
                        });
                    },
                    function (callback) {
                        //////////////////////////////////////////////////////
                        //Task5: Lisitng All the VMs under the subscription.//
                        //////////////////////////////////////////////////////
                        console.log('\n>>>>>>>Start of Task5: List all vms under the current subscription.');
                        computeClient.virtualMachines.listAll(function (err, result) {
                            if (err) {
                                console.log(util.format('\n???????Error in Task5: while listing all the vms under ' +
                                    'the current subscription:\n%s', util.inspect(err, {
                                        depth: null
                                    })));
                                callback(err);
                            } else {
                                console.log(util.format('\n######End of Task5: List all the vms under the current ' +
                                    'subscription is successful.\n%s', util.inspect(result, {
                                        depth: null
                                    })));
                                callback(null, result);
                            }
                        });
                    }
                ],
                //final callback to be run after all the tasks
                function (err, results) {
                    if (err) {
                        console.log(util.format('\n??????Error occurred in one of the operations.\n%s',
                            util.inspect(err, {
                                depth: null
                            })));
                    } else {
                        // console.log(util.format('\n######All the operations have completed successfully. ' +
                        //     'The final set of results are as follows:\n%s', util.inspect(results, {
                        //         depth: null
                        //     })));
                        console.log(util.format('\n\n-->Please execute the following script for cleanup:\nnode cleanup.js %s %s', resourceGroupName, vmName));
                    }
                    return;
                });
        });
    },    

    var msRestAzure = require('ms-rest-azure');
var ComputeManagementClient = require('azure-arm-compute');
var StorageManagementClient = require('azure-arm-storage');
var NetworkManagementClient = require('azure-arm-network');
var ResourceManagementClient = require('azure-arm-resource').ResourceManagementClient;
var clientId = global["env"].CLIENT_ID;
var domain = global["env"].DOMAIN;
var secret = global["env"].APPLICATION_SECRET;
var subscriptionId = global["env"].AZURE_SUBSCRIPTION_ID;
var resourceClient, computeClient, storageClient, networkClient;
//Sample Config
var randomIds = {};
var location = 'eastus';
var accType = 'Standard_LRS';
// var resourceGroupName = 'myResourceGroup';
// var vmName = 'myVM1';
// var storageAccountName = 'csgac825e9687dfx4576x93f';
// var vnetName = 'myVMVNET';
// var subnetName = 'myVMSubnet';
// var publicIPName = 'myVMPublicIP'
// var networkInterfaceName = 'myVMVMNic'
// var ipConfigName = 'ipconfigmyVM';
// var domainNameLabel = 'gsourcedataoutlook.onmicrosoft.com'
// var osDiskName = 'myVM_OsDisk_1_fc1a7ced97274cf490c019aa14fec4c1';

var resourceGroupName = 'testrg5032';
var vmName = 'testvm6543';
var storageAccountName ='testac7660';
var vnetName ='testvnet1450';
var subnetName = 'testsubnet9992';
var publicIPName = 'testpip3041';
var networkInterfaceName = 'testnic9727';
var ipConfigName ='testcrpip6954';
var domainNameLabel = 'testdomainname8039';
var osDiskName ='testosdisk6415';
var adminUsername = 'gsourcedata';
var adminPassword = 'MAlaKKA@216';
// Ubuntu config
// var publisher = 'Canonical';
// var offer = 'UbuntuServer';
// var sku = '16.04-LTS';
// var osType = 'Linux';

// // Windows config
var publisher = 'microsoftwindowsserver';
var offer = 'windowsserver';
var sku = '2012-r2-datacenter';
var osType = 'Windows';
  
  
function _generateRandomId(prefix, exsitIds) {
    var newNumber;
    while (true) {
        newNumber = prefix + Math.floor(Math.random() * 10000);
        if (!exsitIds || !(newNumber in exsitIds)) {
            break;
        }
    }
    return newNumber;
}


// Helper functions
function createVM(finalCallback) {
    //We could have had an async.series over here as well. However, we chose to nest
    //the callbacks to showacase a different pattern in the sample.
    createResourceGroup(function (err, result) {
        if (err) return finalCallback(err);
        createStorageAccount(function (err, accountInfo) {
            if (err) return finalCallback(err);
            createVnet(function (err, vnetInfo) {
                if (err) return finalCallback(err);
                console.log('\nCreated vnet:\n' + util.inspect(vnetInfo, {
                    depth: null
                }));
                getSubnetInfo(function (err, subnetInfo) {
                    if (err) return finalCallback(err);
                    console.log('\nFound subnet:\n' + util.inspect(subnetInfo, {
                        depth: null
                    }));
                    createPublicIP(function (err, publicIPInfo) {
                        if (err) return finalCallback(err);
                        console.log('\nCreated public IP:\n' + util.inspect(publicIPInfo, {
                            depth: null
                        }));
                        createNIC(subnetInfo, publicIPInfo, function (err, nicInfo) {
                            if (err) return finalCallback(err);
                            console.log('\nCreated Network Interface:\n' + util.inspect(nicInfo, {
                                depth: null
                            }));
                            findVMImage(function (err, vmImageInfo) {
                                if (err) return finalCallback(err);
                                console.log('\nFound Vm Image:\n' + util.inspect(vmImageInfo, {
                                    depth: null
                                }));
                                getNICInfo(function (err, nicResult) {
                                    if (err) {
                                        console.log('Could not get the created NIC: ' + networkInterfaceName + util.inspect(err, {
                                            depth: null
                                        }));
                                    } else {
                                        console.log('Found the created NIC: \n' + util.inspect(nicResult, {
                                            depth: null
                                        }));
                                    }
                                    createVirtualMachine(nicInfo.id, vmImageInfo[0].name, function (err, vmInfo) {
                                        if (err) return finalCallback(err);
                                        return finalCallback(null, vmInfo);
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
}

function createResourceGroup(callback) {
    var groupParameters = {
        location: location,
        tags: {
            sampletag: 'sampleValue'
        }
    };
    console.log('\n1.Creating resource group: ' + resourceGroupName);
    return resourceClient.resourceGroups.createOrUpdate(resourceGroupName, groupParameters, callback);
}

function createStorageAccount(callback) {
    console.log('\n2.Creating storage account: ' + storageAccountName);
    var createParameters = {
        location: location,
        sku: {
            name: accType,
        },
        kind: 'Storage',
        tags: {
            tag1: 'val1',
            tag2: 'val2'
        }
    };
    return storageClient.storageAccounts.create(resourceGroupName, storageAccountName, createParameters, callback);
}

function createVnet(callback) {
    var vnetParameters = {
        location: location,
        addressSpace: {
            addressPrefixes: ['10.0.0.0/16']
        },
        dhcpOptions: {
            dnsServers: ['10.1.1.1', '10.1.2.4']
        },
        subnets: [{
            name: subnetName,
            addressPrefix: '10.0.0.0/24'
        }],
    };
    console.log('\n3.Creating vnet: ' + vnetName);
    return networkClient.virtualNetworks.createOrUpdate(resourceGroupName, vnetName, vnetParameters, callback);
}

function getSubnetInfo(callback) {
    console.log('\nGetting subnet info for: ' + subnetName);
    return networkClient.subnets.get(resourceGroupName, vnetName, subnetName, callback);
}

function createPublicIP(callback) {
    var publicIPParameters = {
        location: location,
        publicIPAllocationMethod: 'Dynamic',
        dnsSettings: {
            domainNameLabel: domainNameLabel
        }
    };
    console.log('\n4.Creating public IP: ' + publicIPName);
    return networkClient.publicIPAddresses.createOrUpdate(resourceGroupName, publicIPName, publicIPParameters, callback);
}

function createNIC(subnetInfo, publicIPInfo, callback) {
    var nicParameters = {
        location: location,
        ipConfigurations: [{
            name: ipConfigName,
            privateIPAllocationMethod: 'Dynamic',
            subnet: subnetInfo,
            publicIPAddress: publicIPInfo
        }]
    };
    console.log('\n5.Creating Network Interface: ' + networkInterfaceName);
    return networkClient.networkInterfaces.createOrUpdate(resourceGroupName, networkInterfaceName, nicParameters, callback);
}

function findVMImage(callback) {
    console.log(util.format('\nFinding a VM Image for location %s from ' +
        'publisher %s with offer %s and sku %s', location, publisher, offer, sku));
    return computeClient.virtualMachineImages.list(location, publisher, offer, sku, {
        top: 1
    }, callback);
}

function getNICInfo(callback) {
    return networkClient.networkInterfaces.get(resourceGroupName, networkInterfaceName, callback);
}

function createVirtualMachine(nicId, vmImageVersionNumber, callback) {
    var vmParameters = {
        location: location,
        osProfile: {
            computerName: vmName,
            adminUsername: adminUsername,
            adminPassword: adminPassword
        },
        hardwareProfile: {
            vmSize: 'Basic_A0'
        },
        storageProfile: {
            imageReference: {
                publisher: publisher,
                offer: offer,
                sku: sku,
                version: vmImageVersionNumber
            },
            osDisk: {
                name: osDiskName,
                caching: 'None',
                createOption: 'fromImage',
                vhd: {
                    uri: 'https://' + storageAccountName + '.blob.core.windows.net/nodejscontainer/osnodejslinux.vhd'
                }
            },
        },
        networkProfile: {
            networkInterfaces: [{
                id: nicId,
                primary: true
            }]
        }
    };
    console.log('\n6.Creating Virtual Machine: ' + vmName);
    console.log('\n VM create parameters: ' + util.inspect(vmParameters, {
        depth: null
    }));
    computeClient.virtualMachines.createOrUpdate(resourceGroupName, vmName, vmParameters, callback);
}

function _validateEnvironmentVariables() {
    var envs = [];
    if (!process.env['CLIENT_ID']) envs.push('CLIENT_ID');
    if (!process.env['DOMAIN']) envs.push('DOMAIN');
    if (!process.env['APPLICATION_SECRET']) envs.push('APPLICATION_SECRET');
    if (!process.env['AZURE_SUBSCRIPTION_ID']) envs.push('AZURE_SUBSCRIPTION_ID');
    if (envs.length > 0) {
        throw new Error(util.format('please set/export the following environment variables: %s', envs.toString()));
    }
}


   vmAzure: function (req, res) {
        msRestAzure.loginWithServicePrincipalSecret(clientId, secret, domain, function (err, credentials, subscriptions) {
            if (err) return console.log(err);
            console.log('credentials', credentials, subscriptionId)
            resourceClient = new ResourceManagementClient(credentials, subscriptionId);
            computeClient = new ComputeManagementClient(credentials, subscriptionId);
            storageClient = new StorageManagementClient(credentials, subscriptionId);
            networkClient = new NetworkManagementClient(credentials, subscriptionId);

            async.series([
                    // function (callback) {
                    //     ///////////////////////////////////////////////////////////////////////////////////
                    //     //Task1: Create VM. This is a fairly complex task. Hence we have a wrapper method//
                    //     //named createVM() that encapsulates the steps to create a VM. Other tasks are   //
                    //     //fairly simple in comparison. Hence we don't have a wrapper method for them.    //
                    //     ///////////////////////////////////////////////////////////////////////////////////
                    //     console.log('\n>>>>>>>Start of Task1: Create a VM named: ' + vmName);
                    //     // computeClient.virtualMachines.listAll(function (err, result) {
                    //     //     if (err) {
                    //     //         console.log(util.format('\n???????Error in Task5: while listing all the vms under ' +
                    //     //             'the current subscription:\n%s', util.inspect(err, {
                    //     //                 depth: null
                    //     //             })));
                    //     //         callback(err);
                    //     //     } else {
                    //     //         // console.log(util.format('\n######End of Task5: List all the vms under the current ' +
                    //     //         //     'subscription is successful.\n%s', util.inspect(result, {
                    //     //         //         depth: null
                    //     //         //     })));
                    //     //         callback(null, result);
                    //     //     }
                    //     // });
                    //     // createVM(function (err, result) {
                    //     //     if (err) {
                    //     //         console.log(util.format('\n???????Error in Task1: while creating a VM:\n%s',
                    //     //             util.inspect(err, {
                    //     //                 depth: null
                    //     //             })));
                    //     //         callback(err);
                    //     //     } else {
                    //     //         console.log(util.format('\n######End of Task1: Create a VM is succesful.\n%s',
                    //     //             util.inspect(result, {
                    //     //                 depth: null
                    //     //             })));
                    //     //         callback(null, result);
                    //     //     }
                    //     // });
                    // },
                    function (callback) {
                        /////////////////////////////////////////////////////////
                        //Task2: Get Information about the vm created in Task1.//
                        /////////////////////////////////////////////////////////
                        console.log('\n>>>>>>>Start of Task2: Get VM Info about VM: ' + vmName);
                        computeClient.virtualMachines.get(resourceGroupName, vmName, {
                            expand: 'instanceView'
                        }, function (err, result) {
                            if (err) {
                                console.log(util.format('\n???????Error in Task2: while getting the VM Info:\n%s',
                                    util.inspect(err, {
                                        depth: null
                                    })));
                                callback(err);
                            } else {
                                console.log("result.instanceView", result.instanceView);
                                console.log(util.format('\n######End of Task2: Get VM Info is successful.\n%s',
                                    util.inspect(result, {
                                        depth: null
                                    })));
                                callback(null, result);
                            }
                        });
                    },
                    function (callback) {
                        ///////////////////////////
                        //Task3: Poweroff the VM.//
                        ///////////////////////////
                        console.log('\n>>>>>>>Start of Task3: Poweroff the VM: ' + vmName);
                        computeClient.virtualMachines.powerOff(resourceGroupName, vmName, function (err, result) {
                            if (err) {
                                console.log(util.format('\n???????Error in Task3: while powering off the VM:\n%s',
                                    util.inspect(err, {
                                        depth: null
                                    })));
                                callback(err);
                            } else {
                                console.log(util.format('\n######End of Task3: Poweroff the VM is successful.\n%s',
                                    util.inspect(result, {
                                        depth: null
                                    })));
                                callback(null, result);
                            }
                        });
                    },
                    function (callback) {
                        ////////////////////////
                        //Task4: Start the VM.//
                        ////////////////////////
                        console.log('\n>>>>>>>Start of Task4: Start the VM: ' + vmName);
                        computeClient.virtualMachines.start(resourceGroupName, vmName, function (err, result) {
                            if (err) {
                                console.log(util.format('\n???????Error in Task4: while starting the VM:\n%s',
                                    util.inspect(err, {
                                        depth: null
                                    })));
                                callback(err);
                            } else {
                                console.log(util.format('\n######End of Task4: Start the VM is successful.\n%s',
                                    util.inspect(result, {
                                        depth: null
                                    })));
                                callback(null, result);
                            }
                        });
                    },
                    function (callback) {
                        //////////////////////////////////////////////////////
                        //Task5: Lisitng All the VMs under the subscription.//
                        //////////////////////////////////////////////////////
                        console.log('\n>>>>>>>Start of Task5: List all vms under the current subscription.');
                        computeClient.virtualMachines.listAll(function (err, result) {
                            if (err) {
                                console.log(util.format('\n???????Error in Task5: while listing all the vms under ' +
                                    'the current subscription:\n%s', util.inspect(err, {
                                        depth: null
                                    })));
                                callback(err);
                            } else {
                                console.log(util.format('\n######End of Task5: List all the vms under the current ' +
                                    'subscription is successful.\n%s', util.inspect(result, {
                                        depth: null
                                    })));
                                callback(null, result);
                            }
                        });
                    }
                ],
                //final callback to be run after all the tasks
                function (err, results) {
                    if (err) {
                        console.log(util.format('\n??????Error occurred in one of the operations.\n%s',
                            util.inspect(err, {
                                depth: null
                            })));
                    } else {
                        // console.log(util.format('\n######All the operations have completed successfully. ' +
                        //     'The final set of results are as follows:\n%s', util.inspect(results, {
                        //         depth: null
                        //     })));
                        console.log(util.format('\n\n-->Please execute the following script for cleanup:\nnode cleanup.js %s %s', resourceGroupName, vmName));
                    }
                    return;
                });
        });
    },



    
var msRestAzure = require('ms-rest-azure');
var ComputeManagementClient = require('azure-arm-compute');
var StorageManagementClient = require('azure-arm-storage');
var NetworkManagementClient = require('azure-arm-network');
var ResourceManagementClient = require('azure-arm-resource').ResourceManagementClient;
var clientId = global["env"].CLIENT_ID;
var domain = global["env"].DOMAIN;
var secret = global["env"].APPLICATION_SECRET;
var subscriptionId = global["env"].AZURE_SUBSCRIPTION_ID;
var resourceClient, computeClient, storageClient, networkClient;
//Sample Config
var randomIds = {};
var location = 'eastus';
var accType = 'Standard_LRS';
// var resourceGroupName = 'myResourceGroup';
// var vmName = 'myVM1';
// var storageAccountName = 'csgac825e9687dfx4576x93f';
// var vnetName = 'myVMVNET';
// var subnetName = 'myVMSubnet';
// var publicIPName = 'myVMPublicIP'
// var networkInterfaceName = 'myVMVMNic'
// var ipConfigName = 'ipconfigmyVM';
// var domainNameLabel = 'gsourcedataoutlook.onmicrosoft.com'
// var osDiskName = 'myVM_OsDisk_1_fc1a7ced97274cf490c019aa14fec4c1';

var resourceGroupName = 'testrg5032';
var vmName = 'testvm6543';
var storageAccountName = 'testac7660';
var vnetName = 'testvnet1450';
var subnetName = 'testsubnet9992';
var publicIPName = 'testpip3041';
var networkInterfaceName = 'testnic9727';
var ipConfigName = 'testcrpip6954';
var domainNameLabel = 'testdomainname8039';
var osDiskName = 'testosdisk6415';
var adminUsername = 'gsourcedata';
var adminPassword = 'MAlaKKA@216';
// Ubuntu config
// var publisher = 'Canonical';
// var offer = 'UbuntuServer';
// var sku = '16.04-LTS';
// var osType = 'Linux';

// // Windows config
var publisher = 'microsoftwindowsserver';
var offer = 'windowsserver';
var sku = '2012-r2-datacenter';
var osType = 'Windows';




function _generateRandomId(prefix, exsitIds) {
    var newNumber;
    while (true) {
        newNumber = prefix + Math.floor(Math.random() * 10000);
        if (!exsitIds || !(newNumber in exsitIds)) {
            break;
        }
    }
    return newNumber;
}


// Helper functions
function createVM(finalCallback) {
    //We could have had an async.series over here as well. However, we chose to nest
    //the callbacks to showacase a different pattern in the sample.
    createResourceGroup(function (err, result) {
        if (err) return finalCallback(err);
        createStorageAccount(function (err, accountInfo) {
            if (err) return finalCallback(err);
            createVnet(function (err, vnetInfo) {
                if (err) return finalCallback(err);
                console.log('\nCreated vnet:\n' + util.inspect(vnetInfo, {
                    depth: null
                }));
                getSubnetInfo(function (err, subnetInfo) {
                    if (err) return finalCallback(err);
                    console.log('\nFound subnet:\n' + util.inspect(subnetInfo, {
                        depth: null
                    }));
                    createPublicIP(function (err, publicIPInfo) {
                        if (err) return finalCallback(err);
                        console.log('\nCreated public IP:\n' + util.inspect(publicIPInfo, {
                            depth: null
                        }));
                        createNIC(subnetInfo, publicIPInfo, function (err, nicInfo) {
                            if (err) return finalCallback(err);
                            console.log('\nCreated Network Interface:\n' + util.inspect(nicInfo, {
                                depth: null
                            }));
                            findVMImage(function (err, vmImageInfo) {
                                if (err) return finalCallback(err);
                                console.log('\nFound Vm Image:\n' + util.inspect(vmImageInfo, {
                                    depth: null
                                }));
                                getNICInfo(function (err, nicResult) {
                                    if (err) {
                                        console.log('Could not get the created NIC: ' + networkInterfaceName + util.inspect(err, {
                                            depth: null
                                        }));
                                    } else {
                                        console.log('Found the created NIC: \n' + util.inspect(nicResult, {
                                            depth: null
                                        }));
                                    }
                                    createVirtualMachine(nicInfo.id, vmImageInfo[0].name, function (err, vmInfo) {
                                        if (err) return finalCallback(err);
                                        return finalCallback(null, vmInfo);
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
}

function createResourceGroup(callback) {
    var groupParameters = {
        location: location,
        tags: {
            sampletag: 'sampleValue'
        }
    };
    console.log('\n1.Creating resource group: ' + resourceGroupName);
    return resourceClient.resourceGroups.createOrUpdate(resourceGroupName, groupParameters, callback);
}

function createStorageAccount(callback) {
    console.log('\n2.Creating storage account: ' + storageAccountName);
    var createParameters = {
        location: location,
        sku: {
            name: accType,
        },
        kind: 'Storage',
        tags: {
            tag1: 'val1',
            tag2: 'val2'
        }
    };
    return storageClient.storageAccounts.create(resourceGroupName, storageAccountName, createParameters, callback);
}

function createVnet(callback) {
    var vnetParameters = {
        location: location,
        addressSpace: {
            addressPrefixes: ['10.0.0.0/16']
        },
        dhcpOptions: {
            dnsServers: ['10.1.1.1', '10.1.2.4']
        },
        subnets: [{
            name: subnetName,
            addressPrefix: '10.0.0.0/24'
        }],
    };
    console.log('\n3.Creating vnet: ' + vnetName);
    return networkClient.virtualNetworks.createOrUpdate(resourceGroupName, vnetName, vnetParameters, callback);
}

function getSubnetInfo(callback) {
    console.log('\nGetting subnet info for: ' + subnetName);
    return networkClient.subnets.get(resourceGroupName, vnetName, subnetName, callback);
}

function createPublicIP(callback) {
    var publicIPParameters = {
        location: location,
        publicIPAllocationMethod: 'Dynamic',
        dnsSettings: {
            domainNameLabel: domainNameLabel
        }
    };
    console.log('\n4.Creating public IP: ' + publicIPName);
    return networkClient.publicIPAddresses.createOrUpdate(resourceGroupName, publicIPName, publicIPParameters, callback);
}

function createNIC(subnetInfo, publicIPInfo, callback) {
    var nicParameters = {
        location: location,
        ipConfigurations: [{
            name: ipConfigName,
            privateIPAllocationMethod: 'Dynamic',
            subnet: subnetInfo,
            publicIPAddress: publicIPInfo
        }]
    };
    console.log('\n5.Creating Network Interface: ' + networkInterfaceName);
    return networkClient.networkInterfaces.createOrUpdate(resourceGroupName, networkInterfaceName, nicParameters, callback);
}

function findVMImage(callback) {
    console.log(util.format('\nFinding a VM Image for location %s from ' +
        'publisher %s with offer %s and sku %s', location, publisher, offer, sku));
    return computeClient.virtualMachineImages.list(location, publisher, offer, sku, {
        top: 1
    }, callback);
}

function getNICInfo(callback) {
    return networkClient.networkInterfaces.get(resourceGroupName, networkInterfaceName, callback);
}

function createVirtualMachine(nicId, vmImageVersionNumber, callback) {
    var vmParameters = {
        location: location,
        osProfile: {
            computerName: vmName,
            adminUsername: adminUsername,
            adminPassword: adminPassword
        },
        hardwareProfile: {
            vmSize: 'Basic_A0'
        },
        storageProfile: {
            imageReference: {
                publisher: publisher,
                offer: offer,
                sku: sku,
                version: vmImageVersionNumber
            },
            osDisk: {
                name: osDiskName,
                caching: 'None',
                createOption: 'fromImage',
                vhd: {
                    uri: 'https://' + storageAccountName + '.blob.core.windows.net/nodejscontainer/osnodejslinux.vhd'
                }
            },
        },
        networkProfile: {
            networkInterfaces: [{
                id: nicId,
                primary: true
            }]
        }
    };
    console.log('\n6.Creating Virtual Machine: ' + vmName);
    console.log('\n VM create parameters: ' + util.inspect(vmParameters, {
        depth: null
    }));
    computeClient.virtualMachines.createOrUpdate(resourceGroupName, vmName, vmParameters, callback);
}

function _validateEnvironmentVariables() {
    var envs = [];
    if (!process.env['CLIENT_ID']) envs.push('CLIENT_ID');
    if (!process.env['DOMAIN']) envs.push('DOMAIN');
    if (!process.env['APPLICATION_SECRET']) envs.push('APPLICATION_SECRET');
    if (!process.env['AZURE_SUBSCRIPTION_ID']) envs.push('AZURE_SUBSCRIPTION_ID');
    if (envs.length > 0) {
        throw new Error(util.format('please set/export the following environment variables: %s', envs.toString()));
    }
}