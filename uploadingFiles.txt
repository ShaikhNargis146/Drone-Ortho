var request = require('request');
var crypto = require('crypto');
var publicToken = "TYQ8R9w3BZJ25zvKQhbFfE3XwAj2YtQAyUaVcOI3hsvEMTIo7p6FQRB3viqAgXRB";
var privateToken = "RNTY5FYNZHDnm7hWn3Z7v7qHaK8lkp2YAmAXR7Irp29wsmV47PA1JtJXQ5KwOdh2";
var nonce = "92301kjsadln98123124";
var userAgent = '';
module.exports = _.cloneDeep(require("sails-wohlig-controller"));

function getDateTime() {
    d = new Date().toISOString().replace(/T/, ' ').replace(/\..+/, '')
    d = d.replace(/:/g, "");
    d = d.replace(/-/g, "");
    d = d.replace(' ', '');
    return d;
}

function calculateContentLength(body) {
    body2 = JSON.stringify(body);
    body2 = body2.replace(/"/g, "");
    body2 = body2.replace(/{/g, "");
    body2 = body2.replace(/}/g, "");
    console.log("Buffer.byteLength body2, utf8", Buffer.byteLength(body2, "utf8"));
    return Buffer.byteLength(body2, "utf8")

}

function Event38Signer(url, date, method, nonce, publicToken, privateToken, userAgent, contentLength) {


    var key = nonce + date + privateToken

    header1 = "user-agent: " + userAgent
    header2 = "content-length: " + contentLength

    var signdata = [method.toUpperCase(), url, date, publicToken, nonce, header1, header2]

    sign_data = signdata.join("\n")

    console.log(sign_data)

    sign = crypto.createHmac('SHA256', key).update(sign_data).digest('hex')


    return sign
}

function sendRequest(url, method, userAgent, date, nonce, publicToken, sign, body) {
    process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
    console.log("inside sendRequest", method, userAgent, date, nonce, sign, body, contentLength);

    request(
        url, {
            method: method,
            headers: {
                'user-agent': userAgent,
                'X-E38-Date': date,
                'X-E38-Nonce': nonce,
                'authorization': "Signature token=" + publicToken + "; signature=" + sign + '; headers=user-agent,content-length',
                'content-length': contentLength
            },
            form: body
        },
        function (error, response, body) {
            console.log(error);
            console.log(JSON.parse(body))
            return JSON.parse(body)
        });

}

function checksum(str, algorithm, encoding) {
    return crypto
        .createHash(algorithm || 'md5')
        .update(str, 'utf8')
        .digest(encoding || 'hex')
}
  uploadingFiles: function (req, res) {
        console.log("m in uploadingFiles", req.body);
        process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";

        var url = "http://app.unifli.aero/api/chunked/" + req.body.chunkId + "/",
            // var url = "https://requestb.in/suvqqpsu",
            method = "post",
            userAgent = req.headers['user-agent']

        var files = [];
        var processedFile = [];
        Mission.findOne({
            missionId: req.body.missionId
        }).lean().exec(function (err, missionData) {
            if (err || _.isEmpty(missionData)) {
                res.callback(err, missionData);
            } else {
                //send request to server
                files = missionData.files;
                var i = 0;
                async.waterfall([
                    function concatFiles(callback) {
                        console.log("inside concatFiles create", files);
                        async.concatLimit(files, 20, function (image, callback) {
                            controller.uploadFileToServer(image, url, userAgent, callback);
                        }, callback);
                    },
                    function saveMissionWithFile(returnVal, callback) {
                        console.log("inside saveMissionWithFile", returnVal);
               
                    }
                ], function asyncComplete(err, savedDelivery) {
                    if (err) {
                        console.warn('Error updating file status', err);
                        callback(err, null);
                    } else {
                        console.log("succefully completed the waterfall");
                    }
                });
            }
        });
    },
    uploadFileToServer: function (image, url, userAgent, callback) {
        var method = "post"
        async.waterfall([
            function (callback) {
                request(global["env"].realHost + '/api/upload/readFile?file=' + image.file).pipe(fs.createWriteStream(image.file)).on('finish', function (images) {
                    callback(null, images, image);
                }).on("error", function () {
                    callback("Error while reading the file");
                });
            },
            function (images, image, callback) {
                console.log("image", image);
                fs.readFile(image.file, function (err, imagesData) {
                    if (err) {
                        callback(err, null);
                    } else {
                        var dir = "./.tmp/filesToUpload/";
                        if (!fs.existsSync(dir)) {
                            fs.mkdirSync(dir);
                        }
                        var fileName = image.file;
                        var folder = dir + fileName;
                        var file = fs.createWriteStream(folder);
                        console.log("folder", folder);
                        callback(null, folder, imagesData, fileName, dir);
                    }
                });
            },
            function (folder, imagesData, fileName, dir, callback) {
                fs.writeFile(folder, imagesData, 'binary', function (err) {
                    if (err) {
                        console.log("fs.writeFile ---- error---")
                        callback(err, null);
                    } else {
                        console.log(checksum(imagesData));

                        console.log(checksum(imagesData, 'sha256'));
                        gfs.findOne({
                            filename: image.file
                        }, function (err, file) {
                            console.log("file---", file);
                            body = {
                                part: 1,
                                file_size: file.chunkSize,
                                checksum_sha256: checksum(imagesData, 'sha256'),
                                checksum_md5: checksum(imagesData)
                            }
                            body = _.cloneDeep(body);
                            var myFiles = fs.createReadStream(path.join(dir, fileName));
                            myFiles = _.cloneDeep(myFiles);
                            body.upload = myFiles;
                            callback(null, body);
                        });
                    }
                });
            },
            function (body, callback) {
                contentLength = calculateContentLength(_.cloneDeep(body));
                date = getDateTime()
                //E38 signing function
                sign = Event38Signer(url, date, method, nonce, publicToken, privateToken, userAgent, contentLength);
                request(
                   url, {
                        method: method,
                        headers: {
                            'user-agent': userAgent,
                            'X-E38-Date': date,
                            'X-E38-Nonce': nonce,
                            'authorization': "Signature token=" + publicToken + "; signature=" + sign + '; headers=user-agent,content-length',
                            'content-length': contentLength
                        },
                        formData: _.cloneDeep(body)
                    },
                    function (error, response, body) {
                        // console.log("error", error)
                        console.log("body", body);
                        if (body) {
                            image.status = "success";
                            console.log("image", image);
                            // fs.unlink(image.file);

                            callback(null, []);
                        } else {
                            res.callback("Please provide Valid data", null);
                        }
                    });
            }
        ], function (err, data) {
            if (err) {
                image.value = false;
                data = image;
                callback(null, err);
            } else {
                image.value = true;
                data = image
                callback(null, data);
            }
        });
    },