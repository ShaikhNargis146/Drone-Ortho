var request = require('request');
var crypto = require('crypto');
var publicToken = "TYQ8R9w3BZJ25zvKQhbFfE3XwAj2YtQAyUaVcOI3hsvEMTIo7p6FQRB3viqAgXRB";
var privateToken = "RNTY5FYNZHDnm7hWn3Z7v7qHaK8lkp2YAmAXR7Irp29wsmV47PA1JtJXQ5KwOdh2";
var nonce = "92301kjsadln98123124";
var userAgent = '';
module.exports = _.cloneDeep(require("sails-wohlig-controller"));

function getDateTime() {
    d = new Date().toISOString().replace(/T/, ' ').replace(/\..+/, '')
    d = d.replace(/:/g, "");
    d = d.replace(/-/g, "");
    d = d.replace(' ', '');
    return d;
}

function calculateContentLength(body) {
    body2 = JSON.stringify(body);
    body2 = body2.replace(/"/g, "");
    body2 = body2.replace(/{/g, "");
    body2 = body2.replace(/}/g, "");
    console.log("Buffer.byteLength body2, utf8", Buffer.byteLength(body2, "utf8"));
    return Buffer.byteLength(body2, "utf8")

}

function Event38Signer(url, date, method, nonce, publicToken, privateToken, userAgent, contentLength) {


    var key = nonce + date + privateToken

    header1 = "user-agent: " + userAgent
    header2 = "content-length: " + contentLength

    var signdata = [method.toUpperCase(), url, date, publicToken, nonce, header1, header2]

    sign_data = signdata.join("\n")

    console.log(sign_data)

    sign = crypto.createHmac('SHA256', key).update(sign_data).digest('hex')


    return sign
}

function sendRequest(url, method, userAgent, date, nonce, publicToken, sign, body) {
    process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
    console.log("inside sendRequest", method, userAgent, date, nonce, sign, body, contentLength);

    request(
        url, {
            method: method,
            headers: {
                'user-agent': userAgent,
                'X-E38-Date': date,
                'X-E38-Nonce': nonce,
                'authorization': "Signature token=" + publicToken + "; signature=" + sign + '; headers=user-agent,content-length',
                'content-length': contentLength
            },
            form: body
        },
        function (error, response, body) {
            console.log(error);
            console.log(JSON.parse(body))
            return JSON.parse(body)
        });

}

function checksum(str, algorithm, encoding) {
    return crypto
        .createHash(algorithm || 'md5')
        .update(str, 'utf8')
        .digest(encoding || 'hex')
}

function uploadingFiles(req, res) {
    console.log("m in uploadingFiles", req.body);
    process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";

    var url = "http://app.unifli.aero/api/chunked/" + req.body.chunkId + "/",
        method = "post",
        userAgent = req.headers['user-agent']
    var files = [];
    Mission.findOne({
        missionId: req.body.missionId
    }).lean().exec(function (err, missionData) {
        if (err || _.isEmpty(missionData)) {
            res.callback(err, missionData);
        } else {
            files = missionData.files;
            var i = 0;
            async.eachSeries(files, function (image, callback) {
                console.log("files---", image);
                request(global["env"].realHost + '/api/upload/readFile?file=' + image).pipe(fs.createWriteStream(image)).on('finish', function (images) {
                    // JSZip generates a readable stream with a "end" event,
                    // but is piped here in a writable stream which emits a "finish" event.

                    fs.readFile(image, function (err, imagesData) {
                        if (err) {
                            res.callback(err, null);
                        } else {
                            var folder = process.cwd() + "/filesForServer/";
                            var path = image;
                            var finalPath = folder + path;
                            fs.writeFile(finalPath, imagesData, 'binary', function (err) {
                                if (err) {
                                    res.callback(err, null);
                                } else {
                                    console.log(checksum(imagesData));
                                    console.log(checksum(imagesData, 'sha256'));
                                    gfs.findOne({
                                        filename: image
                                    }, function (err, file) {
                                        body = {
                                            upload: finalPath,
                                            file_size: file.chunkSize,
                                            checksum_sha256: checksum(imagesData, 'sha256'),
                                            checksum_md5: checksum(imagesData),
                                            part: i
                                        }

                                        contentLength = calculateContentLength(body)
                                        console.log("\n---", body);
                                        date = getDateTime()

                                        //E38 signing function
                                        sign = Event38Signer(url, date, method, nonce, publicToken, privateToken, userAgent, contentLength);

                                        var uploadRes = sendRequest(url, method, userAgent, date, nonce, publicToken, sign, body)
                                        i = i + 1;
                                        callback();
                                    });

                                }
                            });
                        }
                    });

                });
            }, function () {
                missionData.fileUploadStatus = 'uploaded';
                Mission.saveData(missionData, res.callback);
            });
        }
    });
}